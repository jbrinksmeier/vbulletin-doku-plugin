<?php


require_once dirname(__FILE__) . '/../../Class/Doku.php';

/**
 * Test class for Class_Doku.
 * Generated by PHPUnit on 2011-01-23 at 19:05:53.
 */
class Class_DokuTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Class_Doku
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Class_Doku::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        Class_Doku::reset();
    }

    /**
     * test getInstance
     */
    public function testGetInstance() {
        $this->assertSame($this->object, Class_Doku::getInstance());
    }

    /**
     * test setConfig
     */
    public function testSetConfig() {
        $config = parse_ini_file(dirname(__FILE__) . '/../fixtures/config.ini', true);
        try {
            Class_Doku::setConfig($config);
            $dokuConfig = Class_Doku::getConfig();
            $assert = !empty($dokuConfig);
            $this->assertTrue($assert);
        } catch (Exception $e) {
            $this->fail($e->getMessage());
        }
    }

    /**
     * test setConfig with invalid config
     * @expectedException Class_Doku_Exception
     */
    public function testSetConfigFail()
    {
        $config = parse_ini_file(dirname(__FILE__) . '/../fixtures/configFail.ini', true);
        Class_Doku::setConfig($config);
        $dokuConfig = $this->object->getConfiguration();
        $assert = empty($dokuConfig);
        $this->assertTrue($assert);
    }
    
    /**
     * test getDoku
     */
    public function testGetDoku() 
    {
        $config = parse_ini_file(dirname(__FILE__) . '/../fixtures/config.ini', true);
        Class_Doku::setConfig($config);
        $adapter = Class_Doku::getDoku('php');
        $this->assertTrue($adapter instanceof Class_Doku_Php);
    }
    
    /**
     * test getDoku uses instance-cache
     */
    public function testGetDokuUsesCache()
    {
        $config = parse_ini_file(dirname(__FILE__) . '/../fixtures/config.ini', true);
        Class_Doku::setConfig($config);
        $adapter1 = Class_Doku::getDoku('php');
        $adapter2 = Class_Doku::getDoku('php');
        $this->assertSame($adapter1, $adapter2);
        $this->assertTrue($adapter1 instanceof Class_Doku_Php);
    }

    /**
     * 
     * @expectedException Class_Doku_Exception
     */
    public function testGetDokuInvalidSoureAdapter()
    {
        $config = parse_ini_file(dirname(__FILE__) . '/../fixtures/config.ini', true);
        $config['php']['sourceadapter'] = 'invalid_class';
        Class_Doku::setConfig($config);
        $adapter1 = Class_Doku::getDoku('php');
    }
    
    /**
     * test getDoku with doku-class not found
     * @expectedException Class_Doku_Exception
     */
    public function testGetDokuInvalidLanguageClass()
    {
        $config = parse_ini_file(dirname(__FILE__) . '/../fixtures/configFail.ini', true);
        $config['html']['sourceadapter'] = 'Class_Doku_Php_Source_Reflection';
        Class_Doku::setConfig($config);
        $adapter1 = Class_Doku::getDoku('html');
    }
    
    /**
     * test getDoku language not in config
     * @expectedException Class_Doku_Exception
     */
    public function testGetDokuLanguageNotConfigured()
    {
        $config = parse_ini_file(dirname(__FILE__) . '/../fixtures/config.ini', true);
        Class_Doku::setConfig($config);
        $adapter1 = Class_Doku::getDoku('html');
    }
    
    /**
     * test unconfigured withour loading config
     */
    public function testUnconfiguredWithoutConfig() 
    {
        $this->assertTrue(Class_Doku::unconfigured());
    }
    
    /**
     * test unconfigured with loaded config
     */
    public function testUnconfiguredWithConfig()
    {
        Class_Doku::setConfig(parse_ini_file(dirname(__FILE__) . '/../fixtures/config.ini', true));
        $this->assertFalse(Class_Doku::unconfigured());
    }

}

?>
